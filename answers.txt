# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Brett Chalabian   
Student ID: 004159487   
Email: bchalabian@ucla.edu      

# Partner 2 (if you're working in a team)
Name: Chul Hee Woo
Student ID: 304189459
Email: chwl3@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
#
#    

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
    
    We fixed a condition in task_download where a filename could exceed
    the maximum allowable size when %s~%d~ appends the two '~' characters.

    We also checked to make sure the filename attempting to be downloaded
    is not larger than the maximum filename size. 

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
#   
   We fixed a robustness issue where the file that is being downloaded is too
   large and may fill up the directory. In order to combat this, we added a 
   maximum file size and checked that the data being written to the disk from
   the task buffer is not larger than this maximum size.


# EXERCISE 3: Describe the attacks you implemented for "evil mode". Why
#    are they attacks?  (~3-10 sentences each)
#
       Attack 1: The first attack we implemented was an attack that attempts
       to download a file that the peer has not registered as owning. In 
       task_download, we copy the string "../osppeer.c" to t->filename and then
       call osp2p_writef(t->peer_fd, "GET....). This connects to the peer and 
       requests a file we know they have but they have not registered. This is
       an attack because we could download information that they did not willingly
       upload and may contain personal information.

       Attack 2: The second attack we implemented was an attack that forces the
       peer to download and overwrite their "osppeer" program with another file 
       that we choose to give them. We do this by 

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
#

